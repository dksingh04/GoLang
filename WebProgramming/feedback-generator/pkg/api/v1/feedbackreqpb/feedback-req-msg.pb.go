// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feedback-req-msg.proto

package feedbackreqpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FeedbackRequest struct {
	CandidateName string `protobuf:"bytes,1,opt,name=candidate_name,json=candidateName,proto3" json:"candidate_name,omitempty"`
	RecruiterName string `protobuf:"bytes,2,opt,name=recruiter_name,json=recruiterName,proto3" json:"recruiter_name,omitempty"`
	InterviewDate string `protobuf:"bytes,3,opt,name=interview_date,json=interviewDate,proto3" json:"interview_date,omitempty"`
	// Full-Stack, Java, Dev-ops, UI-developer etc
	TypeOfJob               string               `protobuf:"bytes,4,opt,name=type_of_job,json=typeOfJob,proto3" json:"type_of_job,omitempty"`
	IsProxy                 bool                 `protobuf:"varint,5,opt,name=is_proxy,json=isProxy,proto3" json:"is_proxy,omitempty"`
	IsCodingRequired        bool                 `protobuf:"varint,6,opt,name=is_coding_required,json=isCodingRequired,proto3" json:"is_coding_required,omitempty"`
	IsWhiteboardingRequired bool                 `protobuf:"varint,7,opt,name=is_whiteboarding_required,json=isWhiteboardingRequired,proto3" json:"is_whiteboarding_required,omitempty"`
	IsIdRequired            bool                 `protobuf:"varint,8,opt,name=is_id_required,json=isIdRequired,proto3" json:"is_id_required,omitempty"`
	IsCodeCompiled          bool                 `protobuf:"varint,9,opt,name=is_code_compiled,json=isCodeCompiled,proto3" json:"is_code_compiled,omitempty"`
	IsAbleToWritePseudoCode bool                 `protobuf:"varint,10,opt,name=is_able_to_write_pseudoCode,json=isAbleToWritePseudoCode,proto3" json:"is_able_to_write_pseudoCode,omitempty"`
	IsWhiteboardDone        bool                 `protobuf:"varint,11,opt,name=is_whiteboard_done,json=isWhiteboardDone,proto3" json:"is_whiteboard_done,omitempty"`
	IsAlgoEfficient         bool                 `protobuf:"varint,12,opt,name=is_algo_efficient,json=isAlgoEfficient,proto3" json:"is_algo_efficient,omitempty"`
	TechSkills              []*TechSkill         `protobuf:"bytes,13,rep,name=tech_skills,json=techSkills,proto3" json:"tech_skills,omitempty"`
	NotesComment            string               `protobuf:"bytes,14,opt,name=notes_comment,json=notesComment,proto3" json:"notes_comment,omitempty"`
	CreatDate               *timestamp.Timestamp `protobuf:"bytes,15,opt,name=creatDate,proto3" json:"creatDate,omitempty"`
	UpdateDate              *timestamp.Timestamp `protobuf:"bytes,16,opt,name=updateDate,proto3" json:"updateDate,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}             `json:"-"`
	XXX_unrecognized        []byte               `json:"-"`
	XXX_sizecache           int32                `json:"-"`
}

func (m *FeedbackRequest) Reset()         { *m = FeedbackRequest{} }
func (m *FeedbackRequest) String() string { return proto.CompactTextString(m) }
func (*FeedbackRequest) ProtoMessage()    {}
func (*FeedbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11517359181be8a8, []int{0}
}

func (m *FeedbackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedbackRequest.Unmarshal(m, b)
}
func (m *FeedbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedbackRequest.Marshal(b, m, deterministic)
}
func (m *FeedbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedbackRequest.Merge(m, src)
}
func (m *FeedbackRequest) XXX_Size() int {
	return xxx_messageInfo_FeedbackRequest.Size(m)
}
func (m *FeedbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeedbackRequest proto.InternalMessageInfo

func (m *FeedbackRequest) GetCandidateName() string {
	if m != nil {
		return m.CandidateName
	}
	return ""
}

func (m *FeedbackRequest) GetRecruiterName() string {
	if m != nil {
		return m.RecruiterName
	}
	return ""
}

func (m *FeedbackRequest) GetInterviewDate() string {
	if m != nil {
		return m.InterviewDate
	}
	return ""
}

func (m *FeedbackRequest) GetTypeOfJob() string {
	if m != nil {
		return m.TypeOfJob
	}
	return ""
}

func (m *FeedbackRequest) GetIsProxy() bool {
	if m != nil {
		return m.IsProxy
	}
	return false
}

func (m *FeedbackRequest) GetIsCodingRequired() bool {
	if m != nil {
		return m.IsCodingRequired
	}
	return false
}

func (m *FeedbackRequest) GetIsWhiteboardingRequired() bool {
	if m != nil {
		return m.IsWhiteboardingRequired
	}
	return false
}

func (m *FeedbackRequest) GetIsIdRequired() bool {
	if m != nil {
		return m.IsIdRequired
	}
	return false
}

func (m *FeedbackRequest) GetIsCodeCompiled() bool {
	if m != nil {
		return m.IsCodeCompiled
	}
	return false
}

func (m *FeedbackRequest) GetIsAbleToWritePseudoCode() bool {
	if m != nil {
		return m.IsAbleToWritePseudoCode
	}
	return false
}

func (m *FeedbackRequest) GetIsWhiteboardDone() bool {
	if m != nil {
		return m.IsWhiteboardDone
	}
	return false
}

func (m *FeedbackRequest) GetIsAlgoEfficient() bool {
	if m != nil {
		return m.IsAlgoEfficient
	}
	return false
}

func (m *FeedbackRequest) GetTechSkills() []*TechSkill {
	if m != nil {
		return m.TechSkills
	}
	return nil
}

func (m *FeedbackRequest) GetNotesComment() string {
	if m != nil {
		return m.NotesComment
	}
	return ""
}

func (m *FeedbackRequest) GetCreatDate() *timestamp.Timestamp {
	if m != nil {
		return m.CreatDate
	}
	return nil
}

func (m *FeedbackRequest) GetUpdateDate() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateDate
	}
	return nil
}

type TechSkill struct {
	SkillRating          int32                   `protobuf:"varint,1,opt,name=skill_rating,json=skillRating,proto3" json:"skill_rating,omitempty"`
	ExperienceRating     int32                   `protobuf:"varint,2,opt,name=experience_rating,json=experienceRating,proto3" json:"experience_rating,omitempty"`
	TopicCovered         []*TopicCoveredInSkills `protobuf:"bytes,3,rep,name=topic_covered,json=topicCovered,proto3" json:"topic_covered,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TechSkill) Reset()         { *m = TechSkill{} }
func (m *TechSkill) String() string { return proto.CompactTextString(m) }
func (*TechSkill) ProtoMessage()    {}
func (*TechSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_11517359181be8a8, []int{1}
}

func (m *TechSkill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechSkill.Unmarshal(m, b)
}
func (m *TechSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechSkill.Marshal(b, m, deterministic)
}
func (m *TechSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechSkill.Merge(m, src)
}
func (m *TechSkill) XXX_Size() int {
	return xxx_messageInfo_TechSkill.Size(m)
}
func (m *TechSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_TechSkill.DiscardUnknown(m)
}

var xxx_messageInfo_TechSkill proto.InternalMessageInfo

func (m *TechSkill) GetSkillRating() int32 {
	if m != nil {
		return m.SkillRating
	}
	return 0
}

func (m *TechSkill) GetExperienceRating() int32 {
	if m != nil {
		return m.ExperienceRating
	}
	return 0
}

func (m *TechSkill) GetTopicCovered() []*TopicCoveredInSkills {
	if m != nil {
		return m.TopicCovered
	}
	return nil
}

type TopicCoveredInSkills struct {
	TopicName                 string   `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	IsScenarioCovered         bool     `protobuf:"varint,2,opt,name=is_scenario_covered,json=isScenarioCovered,proto3" json:"is_scenario_covered,omitempty"`
	WhatSceanrioQuestion      string   `protobuf:"bytes,3,opt,name=what_sceanrio_question,json=whatSceanrioQuestion,proto3" json:"what_sceanrio_question,omitempty"`
	IsAbleToExplainScenario   bool     `protobuf:"varint,4,opt,name=is_able_to_explain_scenario,json=isAbleToExplainScenario,proto3" json:"is_able_to_explain_scenario,omitempty"`
	IsAbleToExaplain          bool     `protobuf:"varint,5,opt,name=is_able_to_exaplain,json=isAbleToExaplain,proto3" json:"is_able_to_exaplain,omitempty"`
	InDepthUnderstanding      bool     `protobuf:"varint,6,opt,name=in_depth_understanding,json=inDepthUnderstanding,proto3" json:"in_depth_understanding,omitempty"`
	PartiallyExplained        bool     `protobuf:"varint,7,opt,name=partially_explained,json=partiallyExplained,proto3" json:"partially_explained,omitempty"`
	IsHandsOn                 bool     `protobuf:"varint,8,opt,name=is_hands_on,json=isHandsOn,proto3" json:"is_hands_on,omitempty"`
	HaveTheroreticalKnowledge bool     `protobuf:"varint,9,opt,name=have_theroretical_knowledge,json=haveTheroreticalKnowledge,proto3" json:"have_theroretical_knowledge,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *TopicCoveredInSkills) Reset()         { *m = TopicCoveredInSkills{} }
func (m *TopicCoveredInSkills) String() string { return proto.CompactTextString(m) }
func (*TopicCoveredInSkills) ProtoMessage()    {}
func (*TopicCoveredInSkills) Descriptor() ([]byte, []int) {
	return fileDescriptor_11517359181be8a8, []int{2}
}

func (m *TopicCoveredInSkills) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicCoveredInSkills.Unmarshal(m, b)
}
func (m *TopicCoveredInSkills) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicCoveredInSkills.Marshal(b, m, deterministic)
}
func (m *TopicCoveredInSkills) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicCoveredInSkills.Merge(m, src)
}
func (m *TopicCoveredInSkills) XXX_Size() int {
	return xxx_messageInfo_TopicCoveredInSkills.Size(m)
}
func (m *TopicCoveredInSkills) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicCoveredInSkills.DiscardUnknown(m)
}

var xxx_messageInfo_TopicCoveredInSkills proto.InternalMessageInfo

func (m *TopicCoveredInSkills) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *TopicCoveredInSkills) GetIsScenarioCovered() bool {
	if m != nil {
		return m.IsScenarioCovered
	}
	return false
}

func (m *TopicCoveredInSkills) GetWhatSceanrioQuestion() string {
	if m != nil {
		return m.WhatSceanrioQuestion
	}
	return ""
}

func (m *TopicCoveredInSkills) GetIsAbleToExplainScenario() bool {
	if m != nil {
		return m.IsAbleToExplainScenario
	}
	return false
}

func (m *TopicCoveredInSkills) GetIsAbleToExaplain() bool {
	if m != nil {
		return m.IsAbleToExaplain
	}
	return false
}

func (m *TopicCoveredInSkills) GetInDepthUnderstanding() bool {
	if m != nil {
		return m.InDepthUnderstanding
	}
	return false
}

func (m *TopicCoveredInSkills) GetPartiallyExplained() bool {
	if m != nil {
		return m.PartiallyExplained
	}
	return false
}

func (m *TopicCoveredInSkills) GetIsHandsOn() bool {
	if m != nil {
		return m.IsHandsOn
	}
	return false
}

func (m *TopicCoveredInSkills) GetHaveTheroreticalKnowledge() bool {
	if m != nil {
		return m.HaveTheroreticalKnowledge
	}
	return false
}

func init() {
	proto.RegisterType((*FeedbackRequest)(nil), "v1.FeedbackRequest")
	proto.RegisterType((*TechSkill)(nil), "v1.TechSkill")
	proto.RegisterType((*TopicCoveredInSkills)(nil), "v1.TopicCoveredInSkills")
}

func init() { proto.RegisterFile("feedback-req-msg.proto", fileDescriptor_11517359181be8a8) }

var fileDescriptor_11517359181be8a8 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x6f, 0x6f, 0xeb, 0x34,
	0x14, 0xc6, 0xd5, 0x96, 0xdd, 0xbb, 0xba, 0x7f, 0xd6, 0xf9, 0x4e, 0x97, 0xec, 0x5e, 0x01, 0x65,
	0x80, 0x54, 0x01, 0x4b, 0xb5, 0xc1, 0x0b, 0x34, 0x01, 0xd2, 0xe8, 0x86, 0x18, 0x48, 0x6c, 0x64,
	0x45, 0x93, 0x78, 0x63, 0x39, 0xc9, 0x69, 0x72, 0x58, 0x62, 0xa7, 0xb6, 0xdb, 0x6e, 0x5f, 0x85,
	0x2f, 0xc5, 0x37, 0xe0, 0xb3, 0x20, 0x3b, 0x7f, 0x5a, 0x10, 0x12, 0xef, 0xda, 0xe7, 0xf9, 0x3d,
	0xf1, 0x39, 0xc9, 0x39, 0x26, 0xaf, 0x17, 0x00, 0x71, 0xc8, 0xa3, 0xc7, 0x53, 0x05, 0xcb, 0xd3,
	0x5c, 0x27, 0x7e, 0xa1, 0xa4, 0x91, 0xb4, 0xbd, 0x3e, 0x7b, 0xf3, 0x41, 0x22, 0x65, 0x92, 0xc1,
	0xd4, 0x29, 0xe1, 0x6a, 0x31, 0x35, 0x98, 0x83, 0x36, 0x3c, 0x2f, 0x4a, 0xe8, 0xe4, 0xaf, 0x3d,
	0x72, 0xf0, 0x7d, 0x95, 0x0f, 0x60, 0xb9, 0x02, 0x6d, 0xe8, 0x27, 0x64, 0x18, 0x71, 0x11, 0x63,
	0xcc, 0x0d, 0x30, 0xc1, 0x73, 0xf0, 0x5a, 0xe3, 0xd6, 0xa4, 0x1b, 0x0c, 0x1a, 0xf5, 0x67, 0x9e,
	0x83, 0xc5, 0x14, 0x44, 0x6a, 0x85, 0x06, 0x54, 0x89, 0xb5, 0x4b, 0xac, 0x51, 0x6b, 0x0c, 0x85,
	0x01, 0xb5, 0x46, 0xd8, 0x30, 0x1b, 0xf6, 0x3a, 0x25, 0xd6, 0xa8, 0x57, 0xdc, 0x00, 0x7d, 0x9f,
	0xf4, 0xcc, 0x73, 0x01, 0x4c, 0x2e, 0xd8, 0xef, 0x32, 0xf4, 0xde, 0x71, 0x4c, 0xd7, 0x4a, 0xb7,
	0x8b, 0x1f, 0x65, 0x48, 0x8f, 0xc9, 0x3e, 0x6a, 0x56, 0x28, 0xf9, 0xf4, 0xec, 0xed, 0x8d, 0x5b,
	0x93, 0xfd, 0xe0, 0x25, 0xea, 0x3b, 0xfb, 0x97, 0x7e, 0x4e, 0x28, 0x6a, 0x16, 0xc9, 0x18, 0x45,
	0xc2, 0x14, 0x2c, 0x57, 0xa8, 0x20, 0xf6, 0x5e, 0x38, 0x68, 0x84, 0x7a, 0xe6, 0x8c, 0xa0, 0xd2,
	0xe9, 0x05, 0x39, 0x46, 0xcd, 0x36, 0x29, 0x1a, 0x08, 0x25, 0x57, 0xff, 0x0c, 0xbd, 0x74, 0xa1,
	0x77, 0x51, 0x3f, 0xec, 0xfa, 0x4d, 0xf6, 0x63, 0x32, 0x44, 0xcd, 0x30, 0xde, 0x06, 0xf6, 0x5d,
	0xa0, 0x8f, 0xfa, 0x26, 0x6e, 0xa8, 0x09, 0x19, 0x95, 0xf5, 0x00, 0x8b, 0x64, 0x5e, 0x60, 0x06,
	0xb1, 0xd7, 0x75, 0xdc, 0xd0, 0x55, 0x03, 0xb3, 0x4a, 0xa5, 0x5f, 0x93, 0xb7, 0xa8, 0x19, 0x0f,
	0x33, 0x60, 0x46, 0xb2, 0x8d, 0x42, 0x03, 0xac, 0xd0, 0xb0, 0x8a, 0xa5, 0xc5, 0x3c, 0x52, 0x57,
	0x73, 0x19, 0x66, 0x30, 0x97, 0x0f, 0xd6, 0xbf, 0x6b, 0xec, 0xaa, 0xef, 0x6d, 0x27, 0x2c, 0x96,
	0x02, 0xbc, 0x5e, 0xdd, 0xf7, 0xb6, 0x85, 0x2b, 0x29, 0x80, 0x7e, 0x4a, 0x0e, 0xed, 0x59, 0x59,
	0x22, 0x19, 0x2c, 0x16, 0x18, 0x21, 0x08, 0xe3, 0xf5, 0x1d, 0x7c, 0x80, 0xfa, 0x32, 0x4b, 0xe4,
	0x75, 0x2d, 0x53, 0x9f, 0xf4, 0x0c, 0x44, 0x29, 0xd3, 0x8f, 0x98, 0x65, 0xda, 0x1b, 0x8c, 0x3b,
	0x93, 0xde, 0xf9, 0xc0, 0x5f, 0x9f, 0xf9, 0x73, 0x88, 0xd2, 0x7b, 0xab, 0x06, 0xc4, 0xd4, 0x3f,
	0x35, 0xfd, 0x88, 0x0c, 0x84, 0x34, 0x60, 0x9b, 0xce, 0x73, 0xfb, 0xdc, 0xa1, 0xfb, 0x7c, 0x7d,
	0x27, 0xce, 0x4a, 0x8d, 0x7e, 0x45, 0xba, 0x91, 0x02, 0x6e, 0xec, 0xe7, 0xf6, 0x0e, 0xc6, 0xad,
	0x49, 0xef, 0xfc, 0x8d, 0x5f, 0xce, 0xa7, 0x5f, 0xcf, 0xa7, 0x3f, 0xaf, 0xe7, 0x33, 0xd8, 0xc2,
	0xf4, 0x82, 0x90, 0x55, 0x61, 0x47, 0xc7, 0x45, 0x47, 0xff, 0x1b, 0xdd, 0xa1, 0x4f, 0xfe, 0x68,
	0x91, 0x6e, 0x53, 0x34, 0xfd, 0x90, 0xf4, 0x5d, 0x4f, 0x4c, 0x71, 0x83, 0x22, 0x71, 0x83, 0xbd,
	0x17, 0xf4, 0x9c, 0x16, 0x38, 0x89, 0x7e, 0x46, 0x0e, 0xe1, 0xa9, 0x00, 0x85, 0x20, 0x22, 0xa8,
	0xb9, 0xb6, 0xe3, 0x46, 0x5b, 0xa3, 0x82, 0xbf, 0x21, 0x03, 0x23, 0x0b, 0x8c, 0x58, 0x24, 0xd7,
	0x60, 0xe7, 0xa1, 0xe3, 0x5e, 0x95, 0xe7, 0x5e, 0x95, 0x35, 0x66, 0xa5, 0x7e, 0x23, 0xca, 0x37,
	0x15, 0xf4, 0xcd, 0x8e, 0x7a, 0xf2, 0x67, 0x87, 0x1c, 0xfd, 0x17, 0x46, 0xdf, 0x23, 0xa4, 0x7c,
	0xee, 0xce, 0xfa, 0x75, 0x9d, 0xe2, 0x76, 0xca, 0x27, 0xaf, 0x50, 0x33, 0x1d, 0x81, 0xe0, 0x0a,
	0x65, 0x73, 0x78, 0xdb, 0x7d, 0xcd, 0x43, 0xd4, 0xf7, 0x95, 0x53, 0x3d, 0x96, 0x7e, 0x49, 0x5e,
	0x6f, 0x52, 0x6e, 0x6c, 0x82, 0x0b, 0x9b, 0x70, 0x8b, 0x8e, 0x52, 0x54, 0xbb, 0x78, 0x64, 0xdd,
	0xfb, 0xca, 0xfc, 0xa5, 0xf2, 0xfe, 0x35, 0x9d, 0xf0, 0x54, 0x64, 0x1c, 0x45, 0x73, 0xaa, 0x5b,
	0xd1, 0x9d, 0xe9, 0xbc, 0x2e, 0xfd, 0xfa, 0x68, 0x7a, 0xea, 0x6a, 0xdc, 0xa6, 0xb9, 0xb3, 0xab,
	0xdd, 0x1d, 0x6d, 0x53, 0xa5, 0x6e, 0x4b, 0x44, 0xc1, 0x62, 0x28, 0x4c, 0xca, 0x56, 0x22, 0x06,
	0xa5, 0x8d, 0xbd, 0x6d, 0x44, 0x52, 0x2d, 0xf2, 0x11, 0x8a, 0x2b, 0x6b, 0xfe, 0xba, 0xeb, 0xd1,
	0x29, 0x79, 0x55, 0x70, 0x65, 0x90, 0x67, 0xd9, 0x73, 0x5d, 0x61, 0xb3, 0xc6, 0xb4, 0xb1, 0xae,
	0x6b, 0xc7, 0x5e, 0x33, 0xa8, 0x59, 0xca, 0x45, 0xac, 0x99, 0x14, 0xd5, 0xfa, 0x76, 0x51, 0xff,
	0x60, 0x95, 0x5b, 0x41, 0xbf, 0x25, 0x6f, 0x53, 0xbe, 0x06, 0x66, 0x52, 0x50, 0x52, 0x81, 0xc1,
	0x88, 0x67, 0xec, 0x51, 0xc8, 0x4d, 0x06, 0x71, 0x02, 0xd5, 0x1a, 0x1f, 0x5b, 0x64, 0xbe, 0x43,
	0xfc, 0x54, 0x03, 0xdf, 0xd1, 0xdf, 0x46, 0xeb, 0xb3, 0x69, 0x7d, 0x23, 0x2b, 0x58, 0x16, 0x61,
	0xf8, 0xc2, 0x8d, 0xe8, 0x17, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xac, 0xc4, 0xf2, 0x86, 0xa9,
	0x05, 0x00, 0x00,
}
